ss@Scalaのコンパイルとかの命令を一手に設定する設定ファイル。JSONで順を守って実行される。0.2.0/inputIdentity:
{
    "id": "S2Client"
}
->コンパイル情報のフィルタ/defineFilter: 
{
    "name": "scala",
    "patterns": [
        {
            "[[]ant:scalac[]] (.*):([0-9].*?): error: (.*)": {
                "selectors": [
                    {
                        "showStatusMessage": {
                            "message": "filterSource[]"
                        }
                    },
                    {
                        "showAtLog": {
                            "message": "filterSource[]"
                        }
                    },
                    {
                        "appendRegion": {
                            "line": "groups[1]",
                            "message": "\"groups[2]\"",
                            "view": "groups[0]",
                            "condition": "keyword"
                        }
                    }
                ]
            }
        },
        {
            "^BUILD SUCCESSFUL": {
                "selectors": [
                    {
                        "eraseAllRegion": {}
                    },
                    {
                        "showStatusMessage": {
                            "message": "scala compile succeeded."
                        }
                    },
                    {
                        "showAtLog": {
                            "message": "scala compile succeeded."
                        }
                    }
                ]
            }
        },
        {
            "^BUILD FAILED": {
                "selectors": [
                    {
                        "showStatusMessage": {
                            "message": "scala compile failure."
                        }
                    },
                    {
                        "showAtLog": {
                            "message": "scala compile failure."
                        }
                    }
                ]
            }
        },
        {
            "^Total time: ([0-9].*) secs": {
                "selectors": [
                    {
                        "showStatusMessage": {
                            "message": "filterSource[]"
                        }
                    },
                    {
                        "showAtLog": {
                            "message": "filterSource[]"
                        }
                    }
                ]
            }
        }
    ]
}
->エラー箇所の表示/setReactor:
{
    "target": "scala",
    "event": "on_selection_modified",
    "replacefromto": {
        "view": "view"
    },
    "interval": 100,
    "selectors": [
        {
            "containsRegions": {
                "target": "scala",
                "emit": "event_errorEmitted",
                "view": "replace"
            }
        }
    ]
}
->エラー選択時の挙動/setReactor:
{
    "target": "scala",
    "event": "event_errorEmitted",
    "replacefromto": {
        "message": "message",
        "line": "title"
    },
    "selectors": [
        {
            "notify": {
                "title": "defaultTitle",
                "message": "defaultMessage"
            }
        }
    ]
}
->バッファイベント発生時の挙動、updateとcompile/setReactor:
{
    "target": "scala",
    "event": "ss_f_runWithBuffer",
    "replacefromto": {
        "body": "message",
        "path": "header"
    },
    "selectors": [
        {
            "monocastMessage": {
                "sender": "-update",
                "target": "S2Client",
                "header": "replace",
                "message": "replace",
                "delimiter": " "
            }
        },
        {
            "eventEmit": {
                "target": "scala",
                "event": "event_S2compile"
            }
        }
    ]
}
->コード更新時、バッファイベント発生/setReactor:
{
    "target": "scala",
    "event": "on_modified",
    "replacefromto": {
        "view": "view"
    },
    "interval": 1000,
    "selectors": [
        {
            "runWithBuffer": {
                "view": "will be replace to specific view"
            }
        }
    ]
}
->STでの保存時のcompile/setReactor: 
{
    "target": "scala",
    "event": "on_post_save",
    "interval": 100,
    "selectors": [
        {
            "monocastMessage": {
                "target": "S2Client",
                "message": "-compile"
            }
        }
    ]
}
->コード更新時のコンパイル/setReactor:
{
    "target": "scala",
    "event": "event_S2compile",
    "selectors": [
        {
            "monocastMessage": {
                "target": "S2Client",
                "message": "-compile"
            }
        }
    ]
}
->点火/monocastMessage:
{
    "target": "S2Client",
    "message": "-ignite"
}